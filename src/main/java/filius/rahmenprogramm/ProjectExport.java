package filius.rahmenprogramm;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;

import javax.imageio.ImageIO;
import javax.imageio.stream.FileImageOutputStream;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;

import filius.Main;
import filius.gui.GUIContainer;
import filius.gui.JMainFrame;
import filius.gui.netzwerksicht.GUIPrintPanel;


public class ProjectExport implements I18n{
	
	private enum FileType { PNG, SVG }
	
	private static ProjectExport projectExport = null;
	
	
    /* Singleton class */
    public static ProjectExport getInstance() {
    	
        if (projectExport == null) {
        	projectExport = new ProjectExport();          
        }
        return projectExport;
    }

	public void exportAsImage() {
		
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setDialogTitle(messages.getString("guimainmemu_msg19"));
		FileNameExtensionFilter pngFileFilter = new FileNameExtensionFilter("Portable Network Graphics", "png");
		FileNameExtensionFilter svgFileFilter = new FileNameExtensionFilter("Scalable Vector Graphics", "svg");
		fileChooser.addChoosableFileFilter(pngFileFilter);
		fileChooser.addChoosableFileFilter(svgFileFilter);
		fileChooser.setAcceptAllFileFilterUsed(false);
		String path = ProjectManager.getInstance().getPath();
		if (path != null) {
			String szenarioFile = new File(path).getAbsolutePath();
			File preselectedFile = new File(szenarioFile.substring(0, szenarioFile.lastIndexOf(".")));
			fileChooser.setSelectedFile(preselectedFile);
		}

		if (fileChooser.showSaveDialog(JMainFrame.getInstance()) == JFileChooser.APPROVE_OPTION) {
			FileFilter selectedFileFilter = fileChooser.getFileFilter();
			FileType type = (svgFileFilter.equals(selectedFileFilter)) ? FileType.SVG : FileType.PNG;

			String imagePath = fileChooser.getSelectedFile().getAbsolutePath();
			if (FileType.SVG == type) {
				imagePath = imagePath.endsWith(".svg") ? imagePath : imagePath + ".svg";
			} else {
				imagePath = imagePath.endsWith(".png") ? imagePath : imagePath + ".png";
			}

			int entscheidung = JOptionPane.YES_OPTION;
			if (imagePath != null && new File(imagePath).exists()) {
				entscheidung = JOptionPane.showConfirmDialog(JMainFrame.getInstance(),
						messages.getString("guimainmemu_msg17"), messages.getString("guimainmemu_msg10"),
						JOptionPane.YES_NO_OPTION);
			}
			if (entscheidung == JOptionPane.YES_OPTION) {
				try {
					if (FileType.SVG == type) {
						exportAsSVG(imagePath);
					} else {
						exportAsPNG(imagePath);
					}
				} catch (IOException e) {
					JOptionPane.showMessageDialog(JMainFrame.getInstance(), messages.getString("guimainmemu_msg11"));
				}
			}
			Main.debug.println("export to file: " + imagePath);
			GUIContainer.getInstance().updateViewport();
		}
	}

	private void exportAsPNG(String imagePath) throws IOException {
		BufferedImage printArea = createNetworkImage();
		try (ImageOutputStream outputStream = new FileImageOutputStream(new File(imagePath))) {
			ImageIO.write(printArea, "png", outputStream);
		}
	}

	public BufferedImage createNetworkImage() {
		GUIPrintPanel printPanel = GUIContainer.getInstance().prepareExportPanel();
		BufferedImage bi = new BufferedImage(printPanel.getWidth(), printPanel.getHeight(), BufferedImage.TYPE_INT_ARGB);
		Graphics g = bi.createGraphics();
		printPanel.paint(g);
		g.dispose();
		BufferedImage printArea = bi.getSubimage(printPanel.getClipX(), printPanel.getClipY(),
				printPanel.getClipWidth(), printPanel.getClipHeight());
		return printArea;
	}

	private void exportAsSVG(String imagePath) throws UnsupportedEncodingException, FileNotFoundException, IOException {
		// Get a DOMImplementation.
		DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();

		// Create an instance of org.w3c.dom.Document.
		String svgNS = "http://www.w3.org/2000/svg";
		Document document = domImpl.createDocument(svgNS, "svg", null);

		SVGGeneratorContext ctx = SVGGeneratorContext.createDefault(document);
		ctx.setComment("Generated by Filius");
		ctx.setEmbeddedFontsOn(true);
		SVGGraphics2D svgGenerator = new SVGGraphics2D(ctx, false);

		GUIPrintPanel printPanel = GUIContainer.getInstance().prepareExportPanel();
		printPanel.paint(svgGenerator);
		svgGenerator.dispose();

		try (Writer out = new OutputStreamWriter(new FileOutputStream(new File(imagePath)), "UTF-8");) {
			svgGenerator.stream(out, true);
		}
	}
}
